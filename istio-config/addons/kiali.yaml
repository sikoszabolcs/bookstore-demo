---
# Source: kiali-server/templates/serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.71.0
---
# Source: kiali-server/templates/configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.71.0
data:
  config.yaml: |
    auth:
      strategy: anonymous
    deployment:
      accessible_namespaces:
      - '**'
      instance_name: kiali
      namespace: istio-system
      view_only_mode: false
    external_services:
      istio:
        config_map_name: istio
        istio_sidecar_injector_config_map_name: istio-sidecar-injector
        istiod_deployment_name: istiod
        istiod_pod_monitoring_port: 15014
      prometheus:
        url: http://prometheus:9090
      tracing:
        enabled: true
        in_cluster_url: http://tracing:16685/jaeger
        url: http://localhost:16686
    identity:
      cert_file: ""
      private_key_file: ""
    login_token:
      signing_key: CHANGEME
    server:
      port: 20001
      web_root: /kiali
---
# Source: kiali-server/templates/role-viewer.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kiali-viewer
  labels:
    app: kiali
    version: v1.71.0
rules:
  - apiGroups: [""]
    resources:
      - configmaps
      - endpoints
      - namespaces
      - nodes
      - pods
      - pods/log
      - replicationcontrollers
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["extensions", "apps"]
    resources:
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["autoscaling"]
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["batch"]
    resources:
      - cronjobs
      - jobs
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["networking.istio.io"]
    resources:
      - destinationrules
      - gateways
      - serviceentries
      - sidecars
      - virtualservices
      - workloadentries
      - workloadgroups
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["security.istio.io"]
    resources:
      - authorizationpolicies
      - peerauthentications
      - requestauthentications
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["telemetry.istio.io"]
    resources:
      - telemetries
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["authentication.istio.io"]
    resources:
      - meshpolicies
      - policies
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["rbac.istio.io"]
    resources:
      - clusterrbacconfigs
      - rbacconfigs
      - serviceroles
      - servicerolebindings
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["apiextensions.k8s.io"]
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["apps.openshift.io"]
    resources:
      - deploymentconfigs
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["project.openshift.io"]
    resources:
      - projects
    verbs:
      - get
      - list
      - watch
  - apiGroups: ["route.openshift.io"]
    resources:
      - routes
    verbs:
      - get
      - list
      - watch
---
# Source: kiali-server/templates/rolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kiali
  labels:
    app: kiali
    version: v1.71.0
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kiali-viewer
subjects:
  - kind: ServiceAccount
    name: kiali
    namespace: istio-system
---
# Source: kiali-server/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.71.0
spec:
  selector:
    app: kiali
  ports:
    - name: http
      protocol: TCP
      port: 20001
      targetPort: 20001
---
# Source: kiali-server/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kiali
  namespace: istio-system
  labels:
    app: kiali
    version: v1.71.0
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kiali
  template:
    metadata:
      name: kiali
      labels:
        app: kiali
        version: v1.71.0
    spec:
      serviceAccountName: kiali
      containers:
        - name: kiali
          image: quay.io/kiali/kiali:v1.71
          imagePullPolicy: IfNotPresent
          ports:
            - name: api-port
              containerPort: 20001
          livenessProbe:
            httpGet:
              path: /kiali/healthz
              port: api-port
            initialDelaySeconds: 5
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /kiali/healthz
              port: api-port
            initialDelaySeconds: 5
            periodSeconds: 30
          env:
            - name: ACTIVE_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: LOG_LEVEL
              value: "info"
            - name: LOG_FORMAT
              value: "text"
          volumeMounts:
            - name: kiali-config
              mountPath: "/kiali-configuration"
            - name: kiali-secret
              mountPath: "/kiali-secret"
            - name: kiali-cabundle
              mountPath: "/kiali-cabundle"
          resources:
            requests:
              cpu: 10m
              memory: 100Mi
            limits:
              cpu: 500m
              memory: 1Gi
      volumes:
        - name: kiali-config
          configMap:
            name: kiali
        - name: kiali-secret
          secret:
            secretName: kiali
            optional: true
        - name: kiali-cabundle
          configMap:
            name: kiali-cabundle
            optional: true
